package com.bkeryah.mails;

import java.text.MessageFormat;
import java.text.ParseException;
import java.util.List;

import javax.inject.Inject;

import com.bkeryah.bean.UserClass;
import com.bkeryah.entities.ArcUsers;
import com.bkeryah.entities.HrsUserAbsent;
import com.bkeryah.service.IDataAccessService;

import calnderutil.HijriCalendarUtil;
import utilities.MsgEntry;
import utilities.MyConstants;
import utilities.Utils;
//@Named
public class AutorisationExecutor extends MailExecutor<HrsUserAbsent> {
	
	@Inject
	public IDataAccessService dataAccessService;
	private String autorizationDay;
	private String autorizationDate;
	private String leavingHour;
	private String leavingMinute;
	private String returnHour;
	private String returnMinute;
	private String reason;
	
	@Override
	public void execute() {
		page = "autorization_model.xhtml";
		super.execute();
	}

	@Override
	public void execute(IDataAccessService dataAccessService) {
		modelContentHtml = "autorization_model.xhtml";
	}
	
	public String saveAction(IDataAccessService dataAccessService) {
		if(!checkFields())
			return "";
		ArcUsers user = Utils.findCurrentUser();
		
		try {
			String title = MessageFormat.format(Utils.loadMessagesFromFile("authorization.title"), user.getEmployeeName(), new HijriCalendarUtil().findCurrentHijriDate());
			HrsUserAbsent userAbsent = new HrsUserAbsent(user.getUserId(), user.getEmployeeNumber(), autorizationDate, leavingHour+":"+leavingMinute, returnHour+":"+returnMinute, MyConstants.PERMISSION, Utils.convertHijriDateToGregorian(autorizationDate),reason);
			dataAccessService.saveAuthorizationOrMission(userAbsent, title, MyConstants.PERMISSION_TYPE, false);
//			dataAccessService.saveAuthorization(user.getVuser_id(), user.getVusers_mgr_id(), title, MyConstants.PERMISSION_TYPE, user.getVusers_dept_id(), null, title, null, false, null, null, null, 0, null, MyConstants.SIGNATURE_TYPE, false, MyConstants.STATUS_PERMISSION, applicationUserDeptJob , Integer.parseInt(user.getEmpNo()), leavingHour+":"+leavingMinute, returnHour+":"+returnMinute, MyConstants.PERMISSION, Utils.convertHijriDateToGregorian(autorizationDate), reason);
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return null;
	}

	private boolean checkFields() {
		boolean valid = true;
		if(!checkRequiredFields())
			valid = false;
		else{
			if(!Utils.checkSomeDayOfDate(autorizationDate, Integer.parseInt(autorizationDay)))
				valid = false;
			if(!Utils.checkValidTime(Integer.parseInt(leavingHour), Integer.parseInt(returnHour), Integer.parseInt(leavingMinute), Integer.parseInt(returnMinute)))
				valid = false;
			else if(!Utils.checkEcartTime(Integer.parseInt(leavingHour), Integer.parseInt(returnHour), Integer.parseInt(leavingMinute), Integer.parseInt(returnMinute), 2))
				valid = false;
		}
		return valid;
	}

	private boolean checkRequiredFields() {
		boolean valid = true;
		if((autorizationDay == null) || (autorizationDay.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("autorizationDay");
			 valid = false;
		}
		if((autorizationDate == null) || (autorizationDate.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("autorizationDate");
			 valid = false;
		}
		if((reason == null) || (reason.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("reason");
			 valid = false;
		}
		if((leavingHour == null) || (leavingHour.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("leavingHour");
			 valid = false;
		}
		if((leavingMinute == null) || (leavingMinute.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("leavingMinute");
			 valid = false;
		}
		if((returnHour == null) || (returnHour.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("returnHour");
			 valid = false;
		}
		if((returnMinute == null) || (returnMinute.trim().equals(""))){
			MsgEntry.addErrorAspectToComponent("returnMinute");
			 valid = false;
		}
		if(!valid)
			MsgEntry.addErrorMessage(Utils.loadMessagesFromFile("required.fields"));
		return valid;
	}

	public String getLeavingHour() {
		return leavingHour;
	}

	public void setLeavingHour(String leavingHour) {
		this.leavingHour = leavingHour;
	}

	public String getLeavingMinute() {
		return leavingMinute;
	}

	public void setLeavingMinute(String leavingMinute) {
		this.leavingMinute = leavingMinute;
	}

	public String getReturnHour() {
		return returnHour;
	}

	public void setReturnHour(String returnHour) {
		this.returnHour = returnHour;
	}

	public String getReturnMinute() {
		return returnMinute;
	}

	public void setReturnMinute(String returnMinute) {
		this.returnMinute = returnMinute;
	}

	public String getReason() {
		return reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	public IDataAccessService getDataAccessService() {
		return dataAccessService;
	}

	public void setDataAccessService(IDataAccessService dataAccessService) {
		this.dataAccessService = dataAccessService;
	}

	public String getAutorizationDay() {
		return autorizationDay;
	}

	public void setAutorizationDay(String autorizationDay) {
		this.autorizationDay = autorizationDay;
	}

	public String getAutorizationDate() {
		return autorizationDate;
	}

	public void setAutorizationDate(String autorizationDate) {
		this.autorizationDate = autorizationDate;
	}

<<<<<<< local
	@Override
	public void editMail(IDataAccessService dataAccessService, int app_id) {
		// TODO Auto-generated method stub
		
	}

=======
	@Override
	public HrsUserAbsent loadData(Object idT) {
		return dataAccessService.loadAuthorizationOrMissionById(11);
	}

>>>>>>> other
}
